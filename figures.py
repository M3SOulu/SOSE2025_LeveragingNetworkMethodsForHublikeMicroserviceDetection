import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


def get_dist(df, col, max, num=100):
    xs = np.linspace(0.0, max, num=num)
    ys = [(df[col] >= threshold).sum() for threshold in xs]
    return xs, ys


def plot_centrality_dist(metrics, DB: bool):
    # metrics = metrics[metrics[f"Betweenness Centrality (DB={DB})"] > 0.0001]
    # metrics = metrics[metrics[f"Eigenvector Centrality (DB={DB})"] > 0.0001]
    norm_deg_dist = get_dist(metrics, f"Norm. Degree Centrality (DB={DB})", 1.0)
    deg_dist = get_dist(metrics, f"Degree Centrality (DB={DB})", metrics[f"Degree Centrality (DB={DB})"].max())
    norm_in_deg_dist = get_dist(metrics, f"Norm. In-degree Centrality (DB={DB})", 1.0)
    in_deg_dist = get_dist(metrics, f"In-degree Centrality (DB={DB})", metrics[f"In-degree Centrality (DB={DB})"].max())
    norm_out_deg_dist = get_dist(metrics, f"Norm. Out-degree Centrality (DB={DB})", 1.0)
    out_deg_dist = get_dist(metrics, f"Out-degree Centrality (DB={DB})", metrics[f"Out-degree Centrality (DB={DB})"].max())
    bet_dist = get_dist(metrics, f"Betweenness Centrality (DB={DB})", 1.0)
    eig_dist = get_dist(metrics, f"Eigenvector Centrality (DB={DB})", 1.0)

    plt.figure(figsize=(14,12))
    plt.subplot(331)
    plt.plot(deg_dist[0], deg_dist[1])
    plt.xlabel("Threshold")
    plt.ylabel("Count(Centrality > Threshold)")
    plt.title("Degree Centrality")
    plt.subplot(332)
    plt.plot(norm_deg_dist[0], norm_deg_dist[1])
    plt.xlabel("Threshold")
    plt.title("Norm. Degree Centrality")
    plt.subplot(333)
    plt.plot(norm_deg_dist[0], norm_deg_dist[1])
    plt.plot(norm_deg_dist[0], deg_dist[1])
    plt.xlabel("Threshold")
    plt.title("Overlaid Degree Centrality")
    plt.subplot(334)
    plt.plot(in_deg_dist[0], in_deg_dist[1])
    plt.xlabel("Threshold")
    plt.ylabel("Count(Centrality > Threshold)")
    plt.title("In-degree Centrality")
    plt.subplot(335)
    plt.plot(norm_in_deg_dist[0], norm_in_deg_dist[1])
    plt.xlabel("Threshold")
    plt.title("Norm. In-degree Centrality")
    plt.subplot(336)
    plt.plot(norm_in_deg_dist[0], norm_in_deg_dist[1])
    plt.plot(norm_in_deg_dist[0], in_deg_dist[1])
    plt.xlabel("Threshold")
    plt.title("Overlaid In-degree Centrality")
    plt.subplot(337)
    plt.plot(out_deg_dist[0], out_deg_dist[1])
    plt.xlabel("Threshold")
    plt.ylabel("Count(Centrality > Threshold)")
    plt.title("Out-degree Centrality")
    plt.subplot(338)
    plt.plot(norm_out_deg_dist[0], norm_out_deg_dist[1])
    plt.xlabel("Threshold")
    plt.title("Norm. Out-degree Centrality")
    plt.subplot(339)
    plt.plot(norm_out_deg_dist[0], norm_out_deg_dist[1])
    plt.plot(norm_out_deg_dist[0], out_deg_dist[1])
    plt.xlabel("Threshold")
    plt.title("Overlaid Out-degree Centrality")
    plt.suptitle(f"Comparison of Absolute and Normalized\n Cumulative Distributions of Degree centralities (DB={DB})\n")
    plt.tight_layout()
    plt.savefig(f"ComparisonDB={DB}.png")

    plt.figure(figsize=(15,8))
    plt.subplot(231)
    plt.plot(norm_deg_dist[0], norm_deg_dist[1])
    plt.xlabel("Threshold")
    plt.ylabel("Count(Centrality > Threshold)")
    plt.title("Norm. Degree Centrality")
    plt.subplot(232)
    plt.plot(norm_in_deg_dist[0], norm_in_deg_dist[1])
    plt.xlabel("Threshold")
    plt.title("Norm. In-degree Centrality")
    plt.subplot(233)
    plt.plot(norm_out_deg_dist[0], norm_out_deg_dist[1])
    plt.xlabel("Threshold")
    plt.title("Norm. Out-degree Centrality")
    plt.subplot(234)
    plt.plot(bet_dist[0], bet_dist[1])
    plt.xlabel("Threshold")
    plt.ylabel("Count(Centrality > Threshold)")
    plt.title("Betweenness Centrality")
    plt.subplot(235)
    plt.plot(eig_dist[0], eig_dist[1])
    plt.xlabel("Threshold")
    plt.title("Eigenvector Centrality")
    plt.suptitle(f"Cumulative distributions of centrality metrics (DB={DB})")
    plt.tight_layout()
    plt.savefig(f"allMetricsDB={DB}.png")


metrics = pd.read_csv("metrics_centrality.csv")
plot_centrality_dist(metrics, DB=True)
plot_centrality_dist(metrics, DB=False)
